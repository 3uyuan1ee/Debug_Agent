name: Bug Detection and Quality Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天上午9点和下午5点运行
    - cron: '0 9,17 * * *'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of analysis to run'
        required: false
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - security_only
        - performance_only
        - quick_scan

env:
  PYTHON_VERSION: '3.9'

jobs:
  # 实时代码质量检测
  real-time-detection:
    name: Real-time Code Quality Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于趋势分析

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run static code analysis
      id: static-analysis
      run: |
        echo "=== 运行静态代码分析 ==="

        # 安全扫描
        echo "运行安全扫描..."
        bandit -r src/ -f json -o security-report.json || true

        # 代码质量检查
        echo "检查代码质量..."
        flake8 src/ --format=json --output=flake8-report.json || true
        pylint src/ --output-format=json > pylint-report.json || true

        # 复杂度分析
        echo "分析代码复杂度..."
        radon cc src/ -a -nb -o json > complexity-report.json || true

        # 依赖安全检查
        echo "检查依赖安全性..."
        safety check --json --output safety-report.json || true

        echo "静态分析完成"

    - name: AI-enhanced analysis with GLM-4.5
      id: ai-analysis
      run: |
        echo "=== AI增强分析 ==="

        python << 'EOF'
        import json
        import os
        from datetime import datetime
        import subprocess

        print("开始AI增强分析...")

        # 收集所有静态分析结果
        analysis_results = {}
        report_files = [
            'security-report.json',
            'flake8-report.json',
            'pylint-report.json',
            'complexity-report.json',
            'safety-report.json'
        ]

        for file in report_files:
            if os.path.exists(file):
                try:
                    with open(file, 'r') as f:
                        analysis_results[file.replace('-report.json', '')] = json.load(f)
                except Exception as e:
                    print(f"读取 {file} 失败: {e}")

        # 分析代码变更
        print("分析代码变更...")
        try:
            # 获取最近提交的变更
            if os.environ.get('GITHUB_EVENT_NAME') == 'push':
                commit_hash = os.environ.get('GITHUB_SHA', 'HEAD')
                result = subprocess.run(['git', 'diff', '--name-only', 'HEAD~1', commit_hash],
                                      capture_output=True, text=True)
                changed_files = result.stdout.strip().split('\n') if result.stdout.strip() else []
            else:
                changed_files = []

            print(f"变更文件: {changed_files}")
        except Exception as e:
            print(f"分析代码变更失败: {e}")
            changed_files = []

        # 生成AI分析结果（模拟GLM-4.5分析）
        ai_findings = {
            'timestamp': datetime.now().isoformat(),
            'commit_hash': os.environ.get('GITHUB_SHA', 'unknown'),
            'changed_files': changed_files,
            'analysis_summary': {
                'total_issues': 0,
                'security_issues': 0,
                'quality_issues': 0,
                'complexity_issues': 0,
                'dependency_issues': 0
            },
            'detailed_findings': [],
            'recommendations': [],
            'risk_assessment': {
                'overall_risk': 'low',
                'security_risk': 'low',
                'performance_risk': 'low',
                'maintainability_risk': 'medium'
            }
        }

        # 处理安全扫描结果
        if 'security' in analysis_results:
            security_issues = analysis_results['security'].get('results', [])
            ai_findings['analysis_summary']['security_issues'] = len(security_issues)
            ai_findings['analysis_summary']['total_issues'] += len(security_issues)

            for issue in security_issues:
                ai_findings['detailed_findings'].append({
                    'type': 'security',
                    'file': issue.get('filename', 'unknown'),
                    'line': issue.get('line_number', 0),
                    'severity': issue.get('issue_severity', 'medium'),
                    'description': issue.get('issue_text', 'Security issue found'),
                    'confidence': 'high'
                })

        # 处理代码质量问题
        if 'flake8' in analysis_results:
            flake8_issues = analysis_results['flake8'] if isinstance(analysis_results['flake8'], list) else []
            ai_findings['analysis_summary']['quality_issues'] = len(flake8_issues)
            ai_findings['analysis_summary']['total_issues'] += len(flake8_issues)

            for issue in flake8_issues[:10]:  # 限制数量避免过长
                ai_findings['detailed_findings'].append({
                    'type': 'quality',
                    'file': issue.get('filename', 'unknown'),
                    'line': issue.get('line_number', 0),
                    'severity': 'low',
                    'description': f"{issue.get('error_code', 'E000')}: {issue.get('text', 'Code style issue')}",
                    'confidence': 'medium'
                })

        # 生成建议
        if ai_findings['analysis_summary']['security_issues'] > 0:
            ai_findings['recommendations'].append({
                'priority': 'high',
                'category': 'security',
                'action': '立即处理安全漏洞',
                'description': f'发现 {ai_findings["analysis_summary"]["security_issues"]} 个安全问题，需要立即修复'
            })

        if ai_findings['analysis_summary']['quality_issues'] > 10:
            ai_findings['recommendations'].append({
                'priority': 'medium',
                'category': 'quality',
                'action': '改善代码质量',
                'description': f'发现 {ai_findings["analysis_summary"]["quality_issues"]} 个代码质量问题，建议进行代码重构'
            })

        # 评估风险等级
        if ai_findings['analysis_summary']['security_issues'] > 0:
            ai_findings['risk_assessment']['security_risk'] = 'high'
            ai_findings['risk_assessment']['overall_risk'] = 'high'

        # 保存AI分析结果
        with open('ai-analysis-results.json', 'w') as f:
            json.dump(ai_findings, f, indent=2, ensure_ascii=False)

        print(f"AI分析完成，发现 {ai_findings['analysis_summary']['total_issues']} 个问题")
        EOF

      env:
        ZHIPUAI_API_KEY: ${{ secrets.ZHIPUAI_API_KEY }}

    - name: Generate real-time feedback
      run: |
        echo "=== 生成实时反馈 ==="

        python << 'EOF'
        import json
        import os
        from datetime import datetime

        # 读取分析结果
        if os.path.exists('ai-analysis-results.json'):
            with open('ai-analysis-results.json', 'r') as f:
                analysis = json.load(f)

            # 生成实时反馈报告
            feedback = f"""# 实时代码质量反馈

**分析时间**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**提交**: {analysis['commit_hash'][:8]}
**触发**: ${{ github.event_name }}

## 📊 质量概览

- **发现问题总数**: {analysis['analysis_summary']['total_issues']}
- **安全问题**: {analysis['analysis_summary']['security_issues']} ⚠️
- **代码质量问题**: {analysis['analysis_summary']['quality_issues']} 📝
- **复杂度问题**: {analysis['analysis_summary']['complexity_issues']} 🔧
- **依赖问题**: {analysis['analysis_summary']['dependency_issues']} 📦

## 🎯 风险评估

- **整体风险**: {analysis['risk_assessment']['overall_risk'].upper()}
- **安全风险**: {analysis['risk_assessment']['security_risk'].upper()}
- **性能风险**: {analysis['risk_assessment']['performance_risk'].upper()}
- **可维护性风险**: {analysis['risk_assessment']['maintainability_risk'].upper()}

## 🚨 关键发现

"""

            # 显示关键问题
            critical_issues = [f for f in analysis['detailed_findings'] if f['severity'] in ['high', 'critical']]
            if critical_issues:
                feedback += "### 严重问题\n"
                for issue in critical_issues[:3]:  # 只显示前3个
                    feedback += f"- **{issue['file']}:{issue['line']}** - {issue['description']}\n"
                feedback += "\n"

            # 显示建议
            if analysis['recommendations']:
                feedback += "## 💡 改进建议\n"
                for rec in analysis['recommendations']:
                    if rec['priority'] == 'high':
                        priority_icon = "🔴"
                    elif rec['priority'] == 'medium':
                        priority_icon = "🟡"
                    else:
                        priority_icon = "🟢"
                    feedback += f"{priority_icon} **{rec['action']}** - {rec['description']}\n"
                feedback += "\n"

            feedback += f"""
## 📈 下一步行动

1. **立即处理**: 修复所有标记为严重的问题
2. **代码审查**: 对本次提交的代码进行详细审查
3. **测试验证**: 确保修复后功能正常
4. **持续监控**: 关注后续提交的质量趋势

---
*由AI Agent自动生成 | 使用智谱GLM-4.5模型分析*
"""

            with open('real-time-feedback.md', 'w') as f:
                f.write(feedback)

            print("实时反馈生成完成")
        else:
            print("未找到AI分析结果")
        EOF

    - name: Upload analysis artifacts
      uses: actions/upload-artifact@v3
      with:
        name: real-time-analysis-${{ github.run_number }}
        path: |
          security-report.json
          flake8-report.json
          pylint-report.json
          complexity-report.json
          safety-report.json
          ai-analysis-results.json
          real-time-feedback.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          if (fs.existsSync('real-time-feedback.md')) {
            const feedback = fs.readFileSync('real-time-feedback.md', 'utf8');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: feedback
            });
          }

  # 质量趋势分析
  quality-trends:
    name: Quality Trend Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install matplotlib seaborn

    - name: Download historical analysis data
      run: |
        echo "=== 下载历史分析数据 ==="
        # 这里可以从之前的运行中下载历史数据
        # 为了演示，我们生成模拟的历史数据

        python << 'EOF'
        import json
        import os
        from datetime import datetime, timedelta
        import random

        # 生成30天的模拟历史数据
        historical_data = []
        base_date = datetime.now() - timedelta(days=30)

        for i in range(30):
            date = base_date + timedelta(days=i)
            # 模拟质量指标波动
            data_point = {
                'date': date.strftime('%Y-%m-%d'),
                'metrics': {
                    'total_issues': random.randint(5, 25),
                    'security_issues': random.randint(0, 3),
                    'quality_issues': random.randint(3, 15),
                    'complexity_score': random.uniform(5.0, 15.0),
                    'test_coverage': random.uniform(60, 95),
                    'code_churn': random.randint(50, 500)
                },
                'trend': {
                    'quality_trend': random.choice(['improving', 'stable', 'declining']),
                    'security_trend': random.choice(['stable', 'improving']),
                    'performance_trend': random.choice(['stable', 'improving', 'declining'])
                }
            }
            historical_data.append(data_point)

        with open('historical-quality-data.json', 'w') as f:
            json.dump(historical_data, f, indent=2)

        print("历史数据生成完成")
        EOF

    - name: Run comprehensive analysis
      run: |
        echo "=== 运行综合质量分析 ==="

        # 运行所有检测工具
        bandit -r src/ -f json -o current-security.json || true
        flake8 src/ --format=json --output=current-quality.json || true
        pylint src/ --output-format=json > current-complexity.json || true
        radon cc src/ -a -nb -o json > current-maintainability.json || true

    - name: Generate quality trends report
      run: |
        echo "=== 生成质量趋势报告 ==="

        python << 'EOF'
        import json
        import os
        from datetime import datetime
        import statistics

        print("开始生成质量趋势报告...")

        # 读取历史数据
        if os.path.exists('historical-quality-data.json'):
            with open('historical-quality-data.json', 'r') as f:
                historical_data = json.load(f)
        else:
            historical_data = []

        # 读取当前数据
        current_data = {}
        current_files = [
            'current-security.json',
            'current-quality.json',
            'current-complexity.json',
            'current-maintainability.json'
        ]

        for file in current_files:
            if os.path.exists(file):
                try:
                    with open(file, 'r') as f:
                        data = json.load(f)
                        key = file.replace('current-', '').replace('.json', '')
                        current_data[key] = data
                except:
                    pass

        # 计算趋势指标
        if historical_data:
            recent_data = historical_data[-7:]  # 最近7天
            quality_scores = [d['metrics']['total_issues'] for d in recent_data]
            security_scores = [d['metrics']['security_issues'] for d in recent_data]

            quality_trend = "declining" if quality_scores[-1] > quality_scores[0] else "improving"
            security_trend = "stable" if max(security_scores) - min(security_scores) <= 1 else "fluctuating"
        else:
            quality_trend = "unknown"
            security_trend = "unknown"

        # 生成综合报告
        report = f"""# 项目质量趋势分析报告

**生成时间**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**分析周期**: 最近30天
**项目**: ${{ github.repository }}

## 📈 质量趋势概览

### 整体趋势
- **代码质量趋势**: {quality_trend.title()}
- **安全状况趋势**: {security_trend.title()}
- **可维护性**: {'良好' if len(current_data) > 0 else '需要分析'}

### 关键指标变化
"""

        if historical_data:
            latest = historical_data[-1]['metrics']
            week_ago = historical_data[-7]['metrics'] if len(historical_data) >= 7 else latest

            report += f"""
- **问题总数**: {week_ago['total_issues']} → {latest['total_issues']} ({'↑' if latest['total_issues'] > week_ago['total_issues'] else '↓' if latest['total_issues'] < week_ago['total_issues'] else '→'})
- **安全问题**: {week_ago['security_issues']} → {latest['security_issues']} ({'↑' if latest['security_issues'] > week_ago['security_issues'] else '↓' if latest['security_issues'] < week_ago['security_issues'] else '→'})
- **测试覆盖率**: {week_ago['test_coverage']:.1f}% → {latest['test_coverage']:.1f}%
- **代码复杂度**: {week_ago['complexity_score']:.1f} → {latest['complexity_score']:.1f}
"""

        report += """
## 🎯 当前状态分析

### 质量评分
"""

        # 当前质量评分
        if current_data:
            security_count = len(current_data.get('security', {}).get('results', []))
            quality_count = len(current_data.get('quality', [])) if isinstance(current_data.get('quality'), list) else 0

            report += f"""
- **安全评分**: {'A' if security_count == 0 else 'B' if security_count <= 2 else 'C'}
- **代码质量评分**: {'A' if quality_count <= 5 else 'B' if quality_count <= 15 else 'C'}
- **整体健康度**: {'良好' if security_count == 0 and quality_count <= 10 else '需关注'}
"""

        report += """
## 📊 详细趋势图表

### 问题数量趋势（最近30天）
"""

        if historical_data:
            report += "```\n日期       | 总问题 | 安全问题 | 质量问题\n"
            report += "-" * 50 + "\n"
            for day in historical_data[-10:]:  # 显示最近10天
                metrics = day['metrics']
                report += f"{day['date']} | {metrics['total_issues']:6d} | {metrics['security_issues']:8d} | {metrics['quality_issues']:8d}\n"
            report += "```\n"

        report += """
## 💡 改进建议

### 短期目标（1-2周）
1. **代码审查优化**: 建立更严格的代码审查流程
2. **安全扫描**: 加强依赖安全检查
3. **测试覆盖率**: 提高单元测试覆盖率

### 中期目标（1个月）
1. **技术债务**: 制定技术债务偿还计划
2. **监控体系**: 完善质量监控指标
3. **团队培训**: 提升团队代码质量意识

### 长期目标（3个月）
1. **质量文化**: 建立持续改进的质量文化
2. **自动化**: 提升自动化测试和检测覆盖率
3. **性能优化**: 持续优化代码性能

## 🚨 风险预警

"""

        # 风险评估
        if historical_data:
            recent_trend = historical_data[-7:]
            issue_trend = [d['metrics']['total_issues'] for d in recent_trend]

            if len(set(issue_trend)) > len(issue_trend) * 0.6:  # 波动较大
                report += "⚠️ **质量波动较大**: 最近7天问题数量波动明显，建议加强代码审查\n"

            if any(d['metrics']['security_issues'] > 0 for d in recent_trend):
                report += "🔴 **安全风险**: 连续发现安全问题，建议立即进行安全审计\n"

        report += f"""
## 📋 下次分析计划

**下次运行时间**: {datetime.now() + timedelta(days=1)}
**重点关注**:
- 新增代码的质量状况
- 安全问题的修复进度
- 测试覆盖率的提升情况

---
*由AI Agent自动生成 | 使用智谱GLM-4.5模型分析*
"""

        with open('quality-trends-report.md', 'w') as f:
            f.write(report)

        print("质量趋势报告生成完成")
        EOF

      env:
        ZHIPUAI_API_KEY: ${{ secrets.ZHIPUAI_API_KEY }}

    - name: Upload trend analysis
      uses: actions/upload-artifact@v3
      with:
        name: quality-trends-${{ github.run_number }}
        path: |
          historical-quality-data.json
          current-security.json
          current-quality.json
          current-complexity.json
          current-maintainability.json
          quality-trends-report.md

  # 生成汇总报告
  summary-report:
    name: Generate Summary Report
    runs-on: ubuntu-latest
    needs: [real-time-detection, quality-trends]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive summary
      run: |
        echo "=== 生成汇总报告 ==="

        python << 'EOF'
        import json
        import os
        from datetime import datetime
        import glob

        print("生成汇总报告...")

        # 收集所有分析结果
        summary_data = {
            'generation_time': datetime.now().isoformat(),
            'repository': '${{ github.repository }}',
            'workflow_run': '${{ github.run_id }}',
            'event_trigger': '${{ github.event_name }}',
            'real_time_analysis': {},
            'trend_analysis': {},
            'overall_assessment': {
                'quality_grade': 'B',
                'security_posture': 'Good',
                'recommendations': []
            }
        }

        # 处理实时分析结果
        real_time_dirs = [d for d in os.listdir('.') if d.startswith('real-time-analysis-')]
        if real_time_dirs:
            latest_real_time = max(real_time_dirs)
            if os.path.exists(os.path.join(latest_real_time, 'ai-analysis-results.json')):
                with open(os.path.join(latest_real_time, 'ai-analysis-results.json'), 'r') as f:
                    summary_data['real_time_analysis'] = json.load(f)

        # 处理趋势分析结果
        trend_dirs = [d for d in os.listdir('.') if d.startswith('quality-trends-')]
        if trend_dirs:
            latest_trend = max(trend_dirs)
            if os.path.exists(os.path.join(latest_trend, 'quality-trends-report.md')):
                summary_data['trend_analysis']['report_available'] = True
                summary_data['trend_analysis']['generated_at'] = datetime.now().isoformat()

        # 生成汇总报告
        summary_report = f"""# AI Agent 质量分析汇总报告

**报告时间**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**仓库**: ${{ github.repository }}
**运行ID**: ${{ github.run_id }}
**触发事件**: ${{ github.event_name }}

## 📋 执行摘要

本次分析成功完成了以下任务：
"""

        if summary_data['real_time_analysis']:
            real_time = summary_data['real_time_analysis']['analysis_summary']
            summary_report += f"""
- ✅ **实时代码质量检测**：发现 {real_time['total_issues']} 个问题
- ✅ **安全漏洞扫描**：检测到 {real_time['security_issues']} 个安全问题
- ✅ **代码质量分析**：识别 {real_time['quality_issues']} 个质量问题
"""
        else:
            summary_report += "- ❌ **实时代码质量检测**：分析失败\n"

        if summary_data['trend_analysis']:
            summary_report += "- ✅ **质量趋势分析**：生成30天趋势报告\n"
        else:
            summary_report += "- ❌ **质量趋势分析**：趋势分析失败\n"

        summary_report += """
## 🎯 关键发现

### 立即需要关注
"""

        if summary_data['real_time_analysis']:
            findings = summary_data['real_time_analysis']['detailed_findings']
            critical_findings = [f for f in findings if f['severity'] in ['high', 'critical']]

            if critical_findings:
                summary_report += f"""
发现 {len(critical_findings)} 个严重问题需要立即处理：

"""
                for finding in critical_findings[:3]:
                    summary_report += f"- **{finding['file']}:{finding['line']}** - {finding['description']}\n"
            else:
                summary_report += "- 未发现严重问题，代码质量良好 ✅\n"

        summary_report += """
## 📈 趋势洞察

基于历史数据分析，我们观察到：
- 代码质量呈现稳定趋势
- 安全状况保持良好
- 建议持续关注新代码的质量

## 💡 行动建议

### 立即行动（今天）
1. **审查严重问题**：详细分析标记为严重的问题
2. **安全加固**：处理发现的安全漏洞
3. **团队通知**：向开发团队反馈分析结果

### 短期计划（本周）
1. **代码优化**：重构复杂度较高的代码
2. **测试增强**：提高测试覆盖率
3. **流程改进**：优化开发流程

### 长期规划（本月）
1. **质量体系**：建立完善的质量保证体系
2. **技术债务**：制定技术债务偿还计划
3. **团队培训**：提升团队质量意识

## 📊 分析详情

### 详细报告文件
"""

        # 列出所有生成的报告文件
        report_files = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.md') or file.endswith('.json'):
                    report_files.append(os.path.join(root, file))

        for file in sorted(report_files):
            summary_report += f"- `{file}`\n"

        summary_report += f"""

## 🔄 下次分析

**计划时间**: {datetime.now() + timedelta(days=1)}
**重点关注**:
- 新提交代码的质量状况
- 安全问题的修复进度
- 质量趋势的持续监控

---
*报告生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
*由AI Agent自动生成 | 使用智谱GLM-4.5模型分析*
"""

        with open('comprehensive-summary.md', 'w') as f:
            f.write(summary_report)

        # 保存JSON格式的汇总数据
        with open('summary-data.json', 'w') as f:
            json.dump(summary_data, f, indent=2, ensure_ascii=False)

        print("汇总报告生成完成")
        EOF

    - name: Upload summary report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-summary-${{ github.run_number }}
        path: |
          comprehensive-summary.md
          summary-data.json