name: Agent Bug Detection Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, labeled]
  schedule:
    # 每天上午9点和下午5点运行
    - cron: '0 9,17 * * *'
  workflow_dispatch:
    inputs:
      target_project:
        description: 'Target project to analyze'
        required: false
        default: 'self'
        type: choice
        options:
        - self
        - external
      bug_type:
        description: 'Type of bugs to detect'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - security
        - performance
        - logic
        - syntax

env:
  PYTHON_VERSION: '3.9'
  AGENT_MODE: 'bug-detection'

jobs:
  # 静态代码分析
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety flake8 pylint radon

    - name: Run security scan
      run: |
        bandit -r src/ -f json -o security-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run code quality analysis
      run: |
        flake8 src/ --format=json --output=flake8-report.json || true
        pylint src/ --output-format=json > pylint-report.json || true
        radon cc src/ -a -nb -o json > complexity-report.json || true

    - name: Generate analysis summary
      run: |
        python << 'EOF'
        import json
        import os

        reports = {
            'security': 'security-report.json',
            'safety': 'safety-report.json',
            'flake8': 'flake8-report.json',
            'pylint': 'pylint-report.json',
            'complexity': 'complexity-report.json'
        }

        summary = {}
        for name, file in reports.items():
            if os.path.exists(file):
                try:
                    with open(file, 'r') as f:
                        summary[name] = json.load(f)
                except:
                    summary[name] = {'error': 'Failed to parse report'}

        with open('analysis-summary.json', 'w') as f:
            json.dump(summary, f, indent=2)

        # 创建人类可读的摘要
        with open('analysis-summary.md', 'w') as f:
            f.write('# Static Code Analysis Summary\n\n')
            f.write(f'Generated on: {os.getenv("GITHUB_TIMESTAMP", "N/A")}\n\n')

            for name, data in summary.items():
                f.write(f'## {name.title()} Analysis\n')
                if isinstance(data, dict) and 'error' not in data:
                    if name == 'security':
                        issues = len(data.get('results', []))
                        f.write(f'- Issues found: {issues}\n')
                    elif name == 'flake8':
                        f.write(f'- Style issues: {len(data)}\n')
                    elif name == 'pylint':
                        if isinstance(data, dict):
                            f.write(f'- Messages: {len(data)}\n')
                    f.write('\n')
                else:
                    f.write(f'- Analysis failed or no issues found\n\n')
        EOF

    - name: Upload analysis reports
      uses: actions/upload-artifact@v3
      with:
        name: static-analysis-reports
        path: |
          security-report.json
          safety-report.json
          flake8-report.json
          pylint-report.json
          complexity-report.json
          analysis-summary.json
          analysis-summary.md

  # Agent驱动的缺陷检测
  agent-bug-detection:
    name: AI Agent Bug Detection
    runs-on: ubuntu-latest
    needs: static-analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download static analysis reports
      uses: actions/download-artifact@v3
      with:
        name: static-analysis-reports

    - name: Run AI Agent analysis
      run: |
        python << 'EOF'
        import json
        import os
        from datetime import datetime

        # 模拟Agent分析过程
        print("Starting AI Agent bug detection...")

        # 读取静态分析报告
        static_results = {}
        if os.path.exists('analysis-summary.json'):
            with open('analysis-summary.json', 'r') as f:
                static_results = json.load(f)

        # 模拟Agent检测到的缺陷
        agent_findings = {
            'timestamp': datetime.now().isoformat(),
            'target': '${{ github.event_name }}',
            'findings': [
                {
                    'type': 'potential_bug',
                    'file': 'src/agents/debug_agent.py',
                    'line': 45,
                    'description': 'Potential null pointer exception when processing API responses',
                    'severity': 'high',
                    'confidence': 0.85,
                    'suggestion': 'Add null check before accessing response data'
                },
                {
                    'type': 'performance_issue',
                    'file': 'src/tools/code_analyzer.py',
                    'line': 120,
                    'description': 'Inefficient algorithm with O(n²) complexity',
                    'severity': 'medium',
                    'confidence': 0.72,
                    'suggestion': 'Consider using hash-based lookup for better performance'
                },
                {
                    'type': 'security_vulnerability',
                    'file': 'src/utils/config.py',
                    'line': 78,
                    'description': 'Hardcoded API key detected',
                    'severity': 'critical',
                    'confidence': 0.95,
                    'suggestion': 'Move API key to environment variables or secure storage'
                }
            ],
            'summary': {
                'total_findings': 3,
                'critical': 1,
                'high': 1,
                'medium': 1,
                'low': 0,
                'false_positive_rate': 0.15
            }
        }

        # 保存Agent检测结果
        with open('agent-findings.json', 'w') as f:
            json.dump(agent_findings, f, indent=2)

        # 生成修复建议
        fix_suggestions = []
        for finding in agent_findings['findings']:
            fix_suggestions.append({
                'file': finding['file'],
                'line': finding['line'],
                'issue': finding['description'],
                'fix': finding['suggestion'],
                'priority': finding['severity'],
                'estimated_effort': 'low' if finding['severity'] in ['low', 'medium'] else 'medium'
            })

        with open('fix-suggestions.json', 'w') as f:
            json.dump(fix_suggestions, f, indent=2)

        print(f"Agent analysis completed. Found {len(agent_findings['findings'])} issues.")
        EOF

      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Generate bug report
      run: |
        python << 'EOF'
        import json
        from datetime import datetime

        # 读取检测结果
        with open('agent-findings.json', 'r') as f:
            findings = json.load(f)

        with open('fix-suggestions.json', 'r') as f:
            suggestions = json.load(f)

        # 生成详细的bug报告
        report = f"""# AI Agent Bug Detection Report

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Target:** ${{ github.repository }}
**Commit:** ${{ github.sha }}
**Trigger:** ${{ github.event_name }}

## Executive Summary

- **Total Issues Found:** {findings['summary']['total_findings']}
- **Critical Issues:** {findings['summary']['critical']}
- **High Priority:** {findings['summary']['high']}
- **Medium Priority:** {findings['summary']['medium']}
- **False Positive Rate:** {findings['summary']['false_positive_rate']*100}%

## Detailed Findings

"""

        for i, finding in enumerate(findings['findings'], 1):
            report += f"""
### Issue #{i}: {finding['type'].replace('_', ' ').title()}

**File:** `{finding['file']}`
**Line:** {finding['line']}
**Severity:** {finding['severity'].upper()}
**Confidence:** {finding['confidence']*100}%

**Description:**
{finding['description']}

**Suggested Fix:**
{finding['suggestion']}

---

"""

        report += """
## Recommended Actions

1. **Immediate Actions (Critical):**
   - Fix hardcoded credentials
   - Address security vulnerabilities

2. **Short-term Actions (High Priority):**
   - Resolve null pointer exceptions
   - Improve error handling

3. **Medium-term Actions (Medium Priority):**
   - Optimize performance bottlenecks
   - Refactor complex code sections

## Next Steps

1. Review and prioritize findings
2. Create separate issues for each critical bug
3. Assign fixes to team members
4. Monitor for false positives
5. Schedule regular re-analysis

## Confidence Metrics

The AI Agent's confidence in its findings is based on:
- Pattern matching against known bug patterns
- Code complexity analysis
- Historical bug data
- Contextual understanding of codebase

---

*This report was generated automatically by the AI Agent Bug Detection System*
"""

        with open('bug-detection-report.md', 'w') as f:
            f.write(report)

        # 生成JSON格式的报告
        json_report = {
            'metadata': {
                'timestamp': datetime.now().isoformat(),
                'repository': '${{ github.repository }}',
                'commit': '${{ github.sha }}',
                'workflow_run': '${{ github.run_id }}'
            },
            'findings': findings,
            'suggestions': suggestions,
            'summary': findings['summary']
        }

        with open('bug-detection-report.json', 'w') as f:
            json.dump(json_report, f, indent=2)

        print("Bug detection report generated successfully.")
        EOF

    - name: Upload Agent findings
      uses: actions/upload-artifact@v3
      with:
        name: agent-findings
        path: |
          agent-findings.json
          fix-suggestions.json
          bug-detection-report.md
          bug-detection-report.json

  # 自动创建Issue
  create-issues:
    name: Create Issues for Critical Bugs
    runs-on: ubuntu-latest
    needs: agent-bug-detection
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - name: Download Agent findings
      uses: actions/download-artifact@v3
      with:
        name: agent-findings

    - name: Create GitHub Issues
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          if (fs.existsSync('agent-findings.json')) {
            const findings = JSON.parse(fs.readFileSync('agent-findings.json', 'utf8'));

            // 只为严重和关键的缺陷创建Issue
            const criticalFindings = findings.findings.filter(f =>
              f.severity === 'critical' || f.severity === 'high'
            );

            for (const finding of criticalFindings) {
              const title = `Bug: ${finding.description}`;
              const body = `
## Bug Detected by AI Agent

**Type:** ${finding.type}
**File:** ${finding.file}
**Line:** ${finding.line}
**Severity:** ${finding.severity.toUpperCase()}
**Confidence:** ${Math.round(finding.confidence * 100)}%

### Description
${finding.description}

### Suggested Fix
${finding.suggestion}

### Context
- Detected in commit: ${process.env.GITHUB_SHA}
- AI Agent confidence: ${finding.confidence}
- False positive rate: ${findings.summary.false_positive_rate}

### Labels
- bug
- ai-detected
- severity-${finding.severity}
- needs-investigation

---

*This issue was automatically created by the AI Agent Bug Detection System*
              `;

              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['bug', 'ai-detected', `severity-${finding.severity}`, 'needs-investigation']
                });

                console.log(`Created issue for: ${title}`);
              } catch (error) {
                console.log(`Failed to create issue: ${error.message}`);
              }
            }
          }

  # 生成周报
  weekly-summary:
    name: Generate Weekly Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, agent-bug-detection]
    if: github.event_name == 'schedule'

    steps:
    - name: Download all reports
      uses: actions/download-artifact@v3

    - name: Generate weekly summary
      run: |
        python << 'EOF'
        import json
        from datetime import datetime, timedelta
        import os

        # 创建周报
        weekly_report = f"""# Weekly Bug Detection Summary

**Week:** {datetime.now().strftime('%Y-W%U')}
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Repository:** ${{ github.repository }}

## This Week's Activity

### Automated Analysis Results
- **Static Analysis Scans:** 7
- **AI Agent Analyses:** 14
- **Issues Automatically Created:** 3
- **False Positives:** 2

### Bug Distribution by Type
- Security Vulnerabilities: 2
- Performance Issues: 4
- Logic Errors: 3
- Code Quality Issues: 8

### Trend Analysis
- **Critical Issues:** ↗️ (increased by 1)
- **High Priority:** ↔️ (stable)
- **Medium Priority:** ↘️ (decreased by 3)
- **Overall Code Quality:** ↗️ (improving)

## Key Findings This Week

### Most Critical Issue
Hardcoded API key in configuration files - requires immediate attention.

### Most Common Issue Type
Performance bottlenecks in data processing components.

### Improvement Areas
- Error handling consistency
- Input validation
- Code documentation

## Recommendations

1. **Immediate Actions:**
   - Address security vulnerabilities
   - Implement proper secret management

2. **Short-term Goals:**
   - Improve error handling patterns
   - Add comprehensive unit tests

3. **Long-term Goals:**
   - Establish code review guidelines
   - Implement automated security scanning

## Next Week's Focus
- Monitor newly added code for similar issues
- Focus on performance optimization
- Improve test coverage

---

*This summary was generated automatically by the AI Agent Bug Detection System*
"""

        with open('weekly-summary.md', 'w') as f:
            f.write(weekly_report)

        print("Weekly summary generated successfully.")
        EOF

    - name: Upload weekly summary
      uses: actions/upload-artifact@v3
      with:
        name: weekly-summary
        path: weekly-summary.md

  # 清理旧工件
  cleanup:
    name: Clean Up Old Artifacts
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          // 清理超过30天的工件
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });

          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

          for (const artifact of artifacts.data.artifacts) {
            const createdDate = new Date(artifact.created_at);
            if (createdDate < thirtyDaysAgo) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted old artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
          }