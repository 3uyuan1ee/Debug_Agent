# AI Agent Configuration File
# 专注于缺陷检测和质量分析，不进行自动修复

# Agent Settings
agent:
  name: "Debug Detection Agent"
  version: "1.0.0"
  description: "AI-powered bug detection and quality analysis system"
  mode: "detection_only"  # 只检测，不修复

  # Agent Behavior Settings
  behavior:
    auto_fix_enabled: false      # 禁用自动修复
    confidence_threshold: 0.7
    max_analysis_depth: 3
    safety_mode: true
    require_confirmation: true

  # Learning Settings
  learning:
    enabled: true
    learn_from_patterns: true
    feedback_collection: true
    trend_analysis: true

  # Communication Settings
  communication:
    create_issues: true
    create_prs: false           # 不自动创建PR
    notify_on_detection: true
    detailed_reports: true

# Bug Detection Settings
bug_detection:
  # Types of bugs to detect
  types:
    - security
    - performance
    - logic
    - syntax
    - style
    - documentation
    - tests
    - maintainability

  # Detection Methods
  methods:
    static_analysis:
      enabled: true
      tools:
        - bandit          # 安全扫描
        - flake8          # 代码风格
        - pylint          # 代码质量
        - safety          # 依赖安全
        - mypy           # 类型检查
        - radon          # 复杂度分析

    dynamic_analysis:
      enabled: true
      tools:
        - pytest         # 单元测试
        - unittest       # 标准测试
        - integration_tests  # 集成测试

    ai_analysis:
      enabled: true
      model: "glm-4.5"    # 使用智谱GLM-4.5模型
      provider: "zhipuai"
      temperature: 0.3
      max_tokens: 2000
      api_key: "${{ secrets.ZHIPUAI_API_KEY }}"

  # Detection Focus Areas
  focus_areas:
    security:
      - hardcoded_secrets
      - sql_injection
      - xss_vulnerability
      - input_validation
      - authentication_issues

    performance:
      - algorithm_efficiency
      - memory_usage
      - database_queries
      - api_responsiveness

    quality:
      - code_duplication
      - complexity_metrics
      - test_coverage
      - documentation_completeness

    maintainability:
      - code_structure
      - naming_conventions
      - comment_quality
      - modularity

  # Severity Levels
  severity:
    critical:
      notify_immediately: true
      create_issue: true
      priority: "immediate"

    high:
      notify_immediately: true
      create_issue: true
      priority: "high"

    medium:
      notify_immediately: false
      create_issue: true
      priority: "medium"

    low:
      notify_immediately: false
      create_issue: false
      priority: "low"

# Reporting Settings
reporting:
  # Report Formats
  formats:
    - json
    - markdown
    - html

  # Report Content
  content:
    executive_summary: true
    detailed_findings: true
    code_examples: true
    recommendations: true
    risk_assessment: true
    trend_analysis: true

  # Real-time Feedback
  real_time:
    enabled: true
    triggers:
      - push
      - pull_request
    response_time: "5min"  # 5分钟内反馈

  # Trend Analysis
  trends:
    enabled: true
    analysis_period: 30    # 30天趋势分析
    comparison_points:
      - daily
      - weekly
      - monthly

  # Schedule
  schedule:
    daily_scan: true
    weekly_summary: true
    monthly_analysis: true

  # Distribution
  distribution:
    github_issues: true
    pr_comments: true
    email_report: false
    slack_notification: false
    file_storage: true

# Quality Metrics
quality_metrics:
  # Core Metrics
  core:
    - bug_density
    - code_coverage
    - complexity_score
    - technical_debt_ratio
    - security_vulnerabilities

  # Advanced Metrics
  advanced:
    - maintainability_index
    - reliability_index
    - test_effectiveness
    - documentation_coverage
    - code_churn_rate

  # Custom Metrics
  custom:
    - team_velocity
    - review_time
    - fix_time
    - recurrence_rate

# Integration Settings
integrations:
  # GitHub Integration
  github:
    enabled: true
    create_issues: true
    comment_on_pr: true
    assign_issues: false
    label_issues: true
    issue_labels:
      - "ai-detected"
      - "bug"
      - "needs-review"
      - "quality-issue"
      - "security-issue"

  # Slack Integration
  slack:
    enabled: false
    webhook_url: "${{ secrets.SLACK_WEBHOOK }}"
    channel: "#dev-alerts"
    notify_on:
      - critical_bugs
      - daily_summary
      - weekly_analysis

  # Email Integration
  email:
    enabled: false
    smtp_server: "${{ secrets.SMTP_SERVER }}"
    smtp_port: 587
    username: "${{ secrets.SMTP_USERNAME }}"
    password: "${{ secrets.SMTP_PASSWORD }}"
    recipients:
      - "dev-team@example.com"

# Monitoring and Metrics
monitoring:
  # Metrics to Track
  metrics:
    - bugs_detected
    - detection_accuracy
    - false_positive_rate
    - response_time
    - code_quality_score
    - trend_indicators

  # Alerts
  alerts:
    high_burden:
      threshold: 50  # issues per day
      enabled: true

    quality_decline:
      threshold: 0.2  # 20% decline
      enabled: true

    security_incident:
      threshold: 1    # any critical issue
      enabled: true

# Security Settings
security:
  # API Keys and Secrets
  api_keys:
    zhipuai: "${{ secrets.ZHIPUAI_API_KEY }}"
    github_token: "${{ secrets.GITHUB_TOKEN }}"

  # Access Control
  access_control:
    enabled: true
    allowed_users:
      - "admin"
      - "developers"
    restricted_operations:
      - "system_configuration"
      - "data_export"

  # Data Privacy
  data_privacy:
    anonymize_data: true
    retention_period: 90  # days
    encryption_enabled: true

# Development Settings
development:
  # Debug Mode
  debug:
    enabled: false
    verbose_logging: false
    test_mode: false

  # Testing
  testing:
    unit_tests: true
    integration_tests: true
    e2e_tests: false
    coverage_threshold: 0.8

  # Development Environment
  environment:
    python_version: "3.9"
    node_version: "18"
    database: "sqlite"

  # Code Quality
  code_quality:
    linting: true
    formatting: true
    complexity_check: true
    security_scan: true

# Performance Settings
performance:
  # Resource Limits
  resources:
    max_memory: "2GB"
    max_cpu_time: 300  # seconds
    max_file_size: "10MB"

  # Caching
  caching:
    enabled: true
    cache_duration: 3600  # seconds
    cache_size: "100MB"

  # Concurrency
  concurrency:
    max_workers: 4
    queue_size: 100
    timeout: 600  # seconds

# Analysis Settings
analysis:
  # Analysis Depth
  depth:
    file_level: true
    function_level: true
    project_level: true

  # Analysis Scope
  scope:
    include_patterns:
      - "*.py"
      - "*.js"
      - "*.ts"
      - "*.java"
      - "*.cpp"
      - "*.c"

    exclude_patterns:
      - "*/tests/*"
      - "*/node_modules/*"
      - "*/venv/*"
      - "*/.git/*"
      - "*.min.js"

  # Analysis Frequency
  frequency:
    on_push: true
    on_pr: true
    scheduled: true
    manual: true

# Environment Specific Settings
environments:
  development:
    debug: true
    verbose_logging: true
    test_mode: true

  staging:
    debug: false
    verbose_logging: false
    test_mode: false

  production:
    debug: false
    verbose_logging: false
    test_mode: false
    restricted_access: true

# ZhipuAI GLM-4.5 Specific Settings
zhipuai:
  model: "glm-4.5"
  api_base: "https://open.bigmodel.cn/api/paas/v4"
  max_tokens: 2000
  temperature: 0.3
  top_p: 0.7
  timeout: 30

  # Prompts
  prompts:
    security_analysis: |
      作为代码安全专家，请分析以下代码的安全性问题：
      1. 识别潜在的安全漏洞
      2. 评估风险等级
      3. 提供具体的修复建议
      4. 遵循OWASP安全标准

    quality_analysis: |
      作为代码质量专家，请分析以下代码的质量问题：
      1. 识别代码质量问题
      2. 评估可维护性
      3. 提供改进建议
      4. 遵循代码最佳实践

    trend_analysis: |
      作为数据分析师，请分析以下代码质量趋势数据：
      1. 识别质量变化趋势
      2. 分析潜在原因
      3. 预测未来趋势
      4. 提供改进建议